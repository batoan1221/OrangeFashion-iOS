//
// Prefix header for all source files of the 'OrangeFashion' target in the 'OrangeFashion' project
//

#import <Availability.h>

#ifndef __IPHONE_3_0
#warning "This project uses features only available in iOS SDK 3.0 and later."
#endif

#ifdef __OBJC__

//Native Libraries
#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>
#import <CoreData/CoreData.h>
#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>
#import <QuartzCore/QuartzCore.h>
#import <MapKit/MapKit.h>

//Categories
#import "ISO8601DateFormatter.h"
#import "MKMapView+Additions.h"
#import "NSArray+Additions.h"
#import "NSCalendar+Additions.h"
#import "NSDate+Additions.h"
#import "NSDictionary+Additions.h"
#import "NSObject+Additions.h"
#import "NSString+ActiveSupportInflector.h"
#import "NSString+Additions.h"
#import "NSString+Validation.h"
#import "UIAlertView+Additions.h"
#import "UIBarButtonItem+Custom.h"
#import "UIColor+Custom.h"
#import "UIColor+Hex.h"
#import "UIFont+Additions.h"
#import "UIImage+Additions.h"
#import "UIImageView+Additions.h"
#import "UILabel+Additions.h"
#import "UINavigationController+Additions.h"
#import "UIView+Additions.h"
#import "UIView+Nib.h"
#import "UIScrollView+Additions.h"
#import "UIViewController+Additions.h"
#import "UIWebView+Additions.h"

//Vendors
#import "SVProgressHUD.h"
#import "AFHTTPClient.h"
#import "UIImageView+AFNetworking.h"
#import "CoreData+MagicalRecord.h"
#import "AFJSONRequestOperation.h"

//Managers
#import "BaseManager.h"
#import "BaseDeviceLibrary.h"
#import "BaseLocationManager.h"
#import "BaseStorageManager.h"
#import "BaseNetworkManager.h"
#import "BaseSharingManager.h"
#import "FacebookManager.h"

//Models
#import "OFHTTPClient.h"
#import "OFProduct.h"
#import "OFProductImages.h"

//Common VC
#import "BaseViewController.h"
#import "BaseTableViewController.h"
#import "OFLeftMenuViewController.h"
#import "OFNavigationViewController.h"

#endif

#define BASE_URL @"http://orangefashion.vn/api/api.php"

//------------------------------------------------------------------------------------------------------

//
// Convenient macro to check app version
//
#define APP_VERSION                                 ([[[NSBundle mainBundle] infoDictionary] objectForKey:(NSString*)kCFBundleVersionKey])
#define APP_VERSION_EQUAL_TO(v)                     ([APP_VERSION compare:v options:NSNumericSearch] == NSOrderedSame)
#define APP_VERSION_GREATER_THAN(v)                 ([APP_VERSION compare:v options:NSNumericSearch] == NSOrderedDescending)
#define APP_VERSION_GREATER_THAN_OR_EQUAL_TO(v)     ([APP_VERSION compare:v options:NSNumericSearch] != NSOrderedAscending)
#define APP_VERSION_LESS_THAN(v)                    ([APP_VERSION compare:v options:NSNumericSearch] == NSOrderedAscending)
#define APP_VERSION_LESS_THAN_OR_EQUAL_TO(v)        ([APP_VERSION compare:v options:NSNumericSearch] != NSOrderedDescending)

//
// Convenient macro to check system version
// Source: http://stackoverflow.com/questions/3339722/check-iphone-ios-version
//
#define SYSTEM_VERSION                              ([[UIDevice currentDevice] systemVersion])
#define SYSTEM_VERSION_EQUAL_TO(v)                  ([SYSTEM_VERSION compare:v options:NSNumericSearch] == NSOrderedSame)
#define SYSTEM_VERSION_GREATER_THAN(v)              ([SYSTEM_VERSION compare:v options:NSNumericSearch] == NSOrderedDescending)
#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([SYSTEM_VERSION compare:v options:NSNumericSearch] != NSOrderedAscending)
#define SYSTEM_VERSION_LESS_THAN(v)                 ([SYSTEM_VERSION compare:v options:NSNumericSearch] == NSOrderedAscending)
#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([SYSTEM_VERSION compare:v options:NSNumericSearch] != NSOrderedDescending)

#define DEVICE_NAME                                 ([[UIDevice currentDevice] name])

#define IS_LANDSCAPE                                (UIInterfaceOrientationIsLandscape([UIApplication sharedApplication].statusBarOrientation))
#define IS_PORTRAIT                                 (UIInterfaceOrientationIsPortrait([UIApplication sharedApplication].statusBarOrientation))
#define IS_IPAD                                     ([UIDevice currentDevice].userInterfaceIdiom==UIUserInterfaceIdiomPad)
#define IS_NOT_IPAD                                 ([UIDevice currentDevice].userInterfaceIdiom!=UIUserInterfaceIdiomPad)
#define IS_RETINA                                   ([UIScreen mainScreen].scale > 1)
#define DEVICE_SCALE                                ([UIScreen mainScreen].scale)

#define IS_IPHONE_5 ( fabs( ( double )[ [ UIScreen mainScreen ] bounds ].size.height - ( double )568 ) < DBL_EPSILON )

//
// Source: http://iphoneincubator.com/blog/debugging/the-evolution-of-a-replacement-for-nslog
// Source: http://www.cimgf.com/2010/05/02/my-current-prefix-pch-file/
//
// DLog is almost a drop-in replacement for NSLog to turn off logging for release build
//
// add -DDEBUG to OTHER_CFLAGS in the build user defined settings
//
// Usage:
//
// DLog();
// DLog(@"here");
// DLog(@"value: %d", x);
// Unfortunately this doesn't work DLog(aStringVariable); you have to do this instead DLog(@"%@", aStringVariable);
//

#ifdef DEBUG
#define DLog(__FORMAT__, ...) NSLog((@"%s [L:%d] " __FORMAT__), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)
#define ALog(...) [[NSAssertionHandler currentHandler] handleFailureInFunction:[NSString stringWithCString:__PRETTY_FUNCTION__ encoding:NSUTF8StringEncoding] file:[NSString stringWithCString:__FILE__ encoding:NSUTF8StringEncoding] lineNumber:__LINE__ description:__VA_ARGS__]
#else
#define DLog(...) do {} while (0)
#define ALog(__FORMAT__, ...) NSLog((@"%s [L:%d] " __FORMAT__), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)
#endif
